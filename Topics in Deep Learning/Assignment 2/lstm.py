# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/158jSr5ih0QA_Xrtm71W2lDpl9llYIwQ2
"""

import torch

class long_short_term_memory_layer(torch.nn.Module):
    def __init__(self, in_features, out_features):
        super().__init__()
        self.reset_parameters(in_features, out_features)

    def forward(self, input, h, c):
        i = torch.sigmoid(torch.mm(input, self.weight_ii) + torch.mm(h, self.weight_hi))
        f = torch.sigmoid(torch.mm(input, self.weight_if) + torch.mm(h, self.weight_hf))
        g = torch.tanh(torch.mm(input, self.weight_ig) + torch.mm(h, self.weight_hg))
        o = torch.sigmoid(torch.mm(input, self.weight_io) + torch.mm(h, self.weight_ho))
        C = torch.mul(f, c) + torch.mul(i, g)
        H = torch.mul(o, torch.tanh(C))
        return H, C

    def reset_parameters(self, in_features, out_features):
        self.in_features = in_features
        self.out_features = out_features
        self.weight_ii = torch.nn.Parameter(torch.randn(in_features, out_features))
        self.weight_hi = torch.nn.Parameter(torch.randn(out_features, out_features))
        self.weight_if = torch.nn.Parameter(torch.randn(in_features, out_features))
        self.weight_hf = torch.nn.Parameter(torch.randn(out_features, out_features))
        self.weight_ig = torch.nn.Parameter(torch.randn(in_features, out_features))
        self.weight_hg = torch.nn.Parameter(torch.randn(out_features, out_features))
        self.weight_io = torch.nn.Parameter(torch.randn(in_features, out_features))
        self.weight_ho = torch.nn.Parameter(torch.randn(out_features, out_features))

# rnn = long_short_term_memory_layer(10, 20)
# input = torch.randn(6, 3, 10)
# hx = torch.randn(3, 20)
# cx = torch.randn(3, 20)
# output = []
# for i in range(6):
#     hx, cx = rnn(input[i], hx, cx)
#     output.append(hx)