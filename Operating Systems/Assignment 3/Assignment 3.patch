diff --git a/Makefile b/Makefile
index 43e152f..ef1c68c 100644
--- a/Makefile
+++ b/Makefile
@@ -48,6 +48,10 @@ TOOLPREFIX := $(shell if riscv64-unknown-elf-objdump -i 2>&1 | grep 'elf64-big'
 	echo "***" 1>&2; exit 1; fi)
 endif
 
+ifndef SELECTION
+SELECTION := SCFIFO
+endif
+
 QEMU = qemu-system-riscv64
 
 CC = $(TOOLPREFIX)gcc
@@ -62,6 +66,7 @@ CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
 CFLAGS += -I.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -D $(SELECTION)
 
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
@@ -133,6 +138,7 @@ UPROGS=\
 	$U/_wc\
 	$U/_zombie\
 	$U/_lazytests\
+	$U/_sanitytest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index b7802e0..1baed12 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -110,6 +110,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             initaging(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -180,6 +181,9 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            pagefault(uint64);
+void            updateagings(void);
+int             copyswapfile(struct proc *, struct proc *);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/param.h b/kernel/param.h
index b5fdcb2..53e028e 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,13 +1,22 @@
-#define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define NPROC            64  // maximum number of processes
+#define NCPU             8  // maximum number of CPUs
+#define NOFILE           16  // open files per process
+#define NFILE            100  // open files per system
+#define NINODE           50  // maximum number of active i-nodes
+#define NDEV             10  // maximum major device number
+#define ROOTDEV          1  // device number of file system root disk
+#define MAXARG           32  // max exec arguments
+#define MAXOPBLOCKS      10  // max # of blocks any FS op writes
+#define LOGSIZE          (MAXOPBLOCKS*3)  // max data blocks in on-disk log
+#define NBUF             (MAXOPBLOCKS*3)  // size of disk block cache
+#define FSSIZE           1000  // size of file system in blocks
+#define MAXPATH          128   // maximum file path name
+#define MAX_PSYC_PAGES   16   // maximum pages in a process physical memory
+#define MAX_TOTAL_PAGES  32   // maximum pages in a process memory
+#define NOTALLOCATED     1
+#define RAM              2
+#define FILE             3
+#define NOTINFILE        -1
+#define NOTINQUEUE       -1
+#define INITAGINGNFUA    0
+#define INITAGINGLAPA    0xFFFFFFFF
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..9849703 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -104,6 +104,7 @@ allocpid() {
 static struct proc*
 allocproc(void)
 {
+  int i;
   struct proc *p;
 
   for(p = proc; p < &proc[NPROC]; p++) {
@@ -141,6 +142,15 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  for(i = 0; i < MAX_TOTAL_PAGES; i++){
+    p->pagingmetadata[i].offset = NOTINFILE;
+    p->pagingmetadata[i].aging = initaging();
+    p->pagingmetadata[i].scfifolocal = NOTINQUEUE;
+    p->pagingmetadata[i].location = NOTALLOCATED;
+  }
+  p->numofpagesinmemory = 0;
+  p->scfifoglobal = 0;  
+
   return p;
 }
 
@@ -252,18 +262,11 @@ userinit(void)
 int
 growproc(int n)
 {
-  uint sz;
   struct proc *p = myproc();
 
-  sz = p->sz;
-  if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
-      return -1;
-    }
-  } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
-  }
-  p->sz = sz;
+  if(n < 0 && uvmdealloc(p->pagetable, p->sz, p->sz + n) == 0)
+    return -1;
+  p->sz += n;
   return 0;
 }
 
@@ -307,6 +310,24 @@ fork(void)
 
   release(&np->lock);
 
+  #if ! defined (NONE)
+    if(pid > 2 && createSwapFile(np) != 0){
+      freeproc(np);
+      release(&np->lock);
+      return -1;
+    }
+    if(p->pid > 2 && copyswapfile(p, np) == -1){
+      freeproc(np);
+      release(&np->lock);
+      return -1;
+    }     
+  #endif
+
+  for(i = 0; i < MAX_TOTAL_PAGES; i++)
+    memmove((void*)&np->pagingmetadata[i], (void*)&p->pagingmetadata[i], sizeof(struct pagingmetadata));
+  np->numofpagesinmemory = p->numofpagesinmemory;
+  np->scfifoglobal = p->scfifoglobal;
+
   acquire(&wait_lock);
   np->parent = p;
   release(&wait_lock);
@@ -353,6 +374,11 @@ exit(int status)
     }
   }
 
+  #if ! defined (NONE)
+    if(p->pid > 2)
+      removeSwapFile(p);
+  #endif
+
   begin_op();
   iput(p->cwd);
   end_op();
@@ -454,6 +480,9 @@ scheduler(void)
         p->state = RUNNING;
         c->proc = p;
         swtch(&c->context, &p->context);
+        #if defined (NFUA) || defined (LAPA)
+          updateagings();
+        #endif
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
@@ -654,3 +683,14 @@ procdump(void)
     printf("\n");
   }
 }
+
+int            
+initaging(void)
+{
+  #if defined (NFUA)
+    return INITAGINGNFUA;
+  #elif defined (LAPA)
+    return INITAGINGLAPA;
+  #endif
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index c007999..36db2f6 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -80,6 +80,15 @@ struct trapframe {
   /* 280 */ uint64 t6;
 };
 
+// A data structure to know which pages are in the process' swap file 
+// and where they are located in that file
+struct pagingmetadata {
+  int offset;                 // Page offset in swapFile, -1 if not in swapFile
+  int aging;                 // Counting the amount of accsses to the page
+  int scfifolocal;
+  int location;               //NOTALLOCATED, RAM or FILE
+};
+
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
 // Per-process state
@@ -107,4 +116,7 @@ struct proc {
   char name[16];               // Process name (debugging)
 
   struct file *swapFile;
+  struct pagingmetadata pagingmetadata[MAX_TOTAL_PAGES];
+  int numofpagesinmemory;
+  int scfifoglobal;
 };
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 0aec003..f80b305 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -331,6 +331,8 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_A (1L << 6) // access flag
+#define PTE_PG (1L << 9) // Paged out to secondary storage
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..b2ae694 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,6 +65,8 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if(r_scause() == 13 || r_scause() == 15){
+      pagefault(r_stval());
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
diff --git a/kernel/vm.c b/kernel/vm.c
index b47f111..4acab2e 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -80,8 +82,12 @@ kvminithart()
 pte_t *
 walk(pagetable_t pagetable, uint64 va, int alloc)
 {
-  if(va >= MAXVA)
+  if(va >= MAXVA){
+    #if defined (NONE)
+      return 0;
+    #endif
     panic("walk");
+  }
 
   for(int level = 2; level > 0; level--) {
     pte_t *pte = &pagetable[PX(level, va)];
@@ -169,17 +175,48 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
     panic("uvmunmap: not aligned");
 
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
-    if((pte = walk(pagetable, a, 0)) == 0)
-      panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
-    if(PTE_FLAGS(*pte) == PTE_V)
-      panic("uvmunmap: not a leaf");
-    if(do_free){
-      uint64 pa = PTE2PA(*pte);
-      kfree((void*)pa);
-    }
-    *pte = 0;
+    pte = walk(pagetable, a, 0);
+    #if ! defined (NONE)
+      struct pagingmetadata *pmd;
+      struct proc *p = myproc();
+      if(pte == 0)
+        panic("uvmunmap: walk");
+      if(*pte & PTE_V){
+        if(PTE_FLAGS(*pte) == PTE_V)
+          panic("uvmunmap: not a leaf");
+        if(do_free){
+          uint64 pa = PTE2PA(*pte);
+          kfree((void*)pa);
+          pmd = &p->pagingmetadata[a/PGSIZE];
+          if(pmd->location == RAM)
+            p->numofpagesinmemory--;
+          pmd->offset = NOTINFILE;
+          pmd->aging = initaging();
+          pmd->scfifolocal = NOTINQUEUE;
+          pmd->location = NOTALLOCATED;
+        }
+      }
+      else{
+        pmd = &p->pagingmetadata[a/PGSIZE];
+        if(pmd->location == RAM)
+          p->numofpagesinmemory--;
+        pmd->offset = NOTINFILE;
+        pmd->aging = initaging();
+        pmd->scfifolocal = NOTINQUEUE;
+        pmd->location = NOTALLOCATED;
+      }
+    #else
+      if(pte && (*pte & PTE_V)){
+        if(PTE_FLAGS(*pte) == PTE_V)
+          panic("uvmunmap: not a leaf");
+        if(do_free){
+          uint64 pa = PTE2PA(*pte);
+          kfree((void*)pa);
+        }
+      }
+    #endif
+    if(pte)
+      *pte = 0;
   }
 }
 
@@ -212,6 +249,155 @@ uvminit(pagetable_t pagetable, uchar *src, uint sz)
   memmove(mem, src, sz);
 }
 
+int
+findfreeoffset(void)
+{
+  int i, offset, found;
+  struct pagingmetadata *pmd;
+  struct proc *p = myproc();
+
+  for(i = 0; i < MAX_TOTAL_PAGES; i++){
+    offset = i*PGSIZE;
+    found = 0;
+    for(pmd = p->pagingmetadata; pmd < &p->pagingmetadata[MAX_TOTAL_PAGES]; pmd++){
+      if(pmd->location == FILE && pmd->offset == offset){
+        found = 1;
+        break;
+      }
+    }
+    if(found == 0)
+      return offset;
+  }
+  return -1;
+}
+
+int
+inserttoqueue(void)
+{
+  #if defined (SCFIFO)
+    int n;
+    struct proc *p = myproc();
+
+    n = p->scfifoglobal;
+    p->scfifoglobal++;
+    return n;
+  #endif
+  return 0;
+}
+
+// Returning pagingmetadata with minimum counter
+struct pagingmetadata *
+nfua()
+{
+  struct pagingmetadata *pmd, *minpmd;
+  struct proc *p = myproc();
+
+  minpmd = 0;
+  for(pmd = p->pagingmetadata; pmd < &p->pagingmetadata[MAX_TOTAL_PAGES]; pmd++){
+    if(pmd->location == RAM){
+      if(!minpmd || pmd->aging < minpmd->aging)
+        minpmd = pmd;
+    }
+  }
+  return minpmd;
+}
+
+// Returning number of 1's in counter
+int
+numofones(int counter)
+{
+  int numofones = 0;
+
+  while(counter > 0){
+    numofones += counter & 1;
+    counter >>= 1;
+  }
+  return numofones;
+}
+
+// Returning pagingmetadata with the smallest number of 1's in counter
+struct pagingmetadata *
+lapa()
+{
+  struct pagingmetadata *pmd, *minpmd;
+  struct proc *p = myproc();
+
+  minpmd = 0;
+  for(pmd = p->pagingmetadata; pmd < &p->pagingmetadata[MAX_TOTAL_PAGES]; pmd++){
+    if(pmd->location == RAM){
+      if(!minpmd || numofones(pmd->aging) < numofones(minpmd->aging))
+        minpmd = pmd;
+      else if(numofones(pmd->aging) == numofones(minpmd->aging) && pmd->aging < minpmd->aging)
+        minpmd = pmd;
+    }
+  }
+  return minpmd;
+}
+
+// Returning pagingmetadata by scfifo algorithm
+struct pagingmetadata *
+scfifo()
+{
+  int i, index;
+  pte_t *pte;
+  struct pagingmetadata *pmd, *minpmd;
+  struct proc *p = myproc();
+
+  i = 0;
+  while(i < MAX_TOTAL_PAGES){
+    minpmd = 0;
+    for(pmd = p->pagingmetadata; pmd < &p->pagingmetadata[MAX_TOTAL_PAGES]; pmd++){
+      if(pmd->scfifolocal != NOTINQUEUE){
+        if(!minpmd || pmd->scfifolocal < minpmd->scfifolocal)
+          minpmd = pmd;
+      }
+    }
+    index = (int) (pmd - p->pagingmetadata);
+    pte = walk(p->pagetable, index*PGSIZE, 0);
+    if((*pte & PTE_A) == 0){
+      minpmd->scfifolocal = NOTINQUEUE;
+      return minpmd;
+    }
+    *pte &= ~PTE_A;
+    minpmd->scfifolocal = inserttoqueue();
+    i++;
+  }
+  panic("scfifo");
+  return minpmd; 
+}
+
+// Swap a page from RAM to file on offset
+void
+swapout(uint offset)
+{
+  int index;
+  void* paddr;
+  pte_t *pte;
+  struct pagingmetadata *pmd = 0;
+  struct proc *p = myproc();
+  
+  #if defined (NFUA)
+    pmd = nfua();
+  #elif defined (LAPA)
+    pmd = lapa();
+  #elif defined (SCFIFO)
+    pmd = scfifo();
+  #endif
+  pmd->offset = offset;
+  pmd->location = FILE;
+  p->numofpagesinmemory--;
+  index = (int) (pmd - p->pagingmetadata);
+  pte = walk(p->pagetable, index*PGSIZE, 0);
+  if(*pte != 0){
+    paddr = (void *)PTE2PA(*pte);
+    if((writeToSwapFile(p, paddr, offset, PGSIZE) == -1))
+      panic("swapout-writeToSwapFile");
+    kfree(paddr);
+    *pte &= ~PTE_V;
+    *pte |= PTE_PG;
+  }
+}
+
 // Allocate PTEs and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 uint64
@@ -225,17 +411,46 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
 
   oldsz = PGROUNDUP(oldsz);
   for(a = oldsz; a < newsz; a += PGSIZE){
-    mem = kalloc();
-    if(mem == 0){
-      uvmdealloc(pagetable, a, oldsz);
-      return 0;
-    }
-    memset(mem, 0, PGSIZE);
-    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
-      kfree(mem);
-      uvmdealloc(pagetable, a, oldsz);
-      return 0;
-    }
+    #if ! defined (NONE)
+      int offset;
+      struct pagingmetadata *pmd;
+      struct proc *p = myproc();
+
+      if(p->numofpagesinmemory >= MAX_PSYC_PAGES){
+        if((offset = findfreeoffset()) == -1)
+          return 0;
+        swapout(offset);
+      }
+      mem = kalloc();
+      if(mem == 0){
+        uvmdealloc(pagetable, a, oldsz);
+        return 0;
+      }
+      memset(mem, 0, PGSIZE);
+      if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
+        kfree(mem);
+        uvmdealloc(pagetable, a, oldsz);
+        return 0;
+      }
+      pmd = &p->pagingmetadata[a/PGSIZE];
+      pmd->offset = NOTINFILE;
+      pmd->aging = initaging();
+      pmd->scfifolocal = inserttoqueue();
+      pmd->location = RAM;
+      p->numofpagesinmemory++;
+    #else
+      mem = kalloc();
+      if(mem == 0){
+        uvmdealloc(pagetable, a, oldsz);
+        return 0;
+      }
+      memset(mem, 0, PGSIZE);
+      if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
+        kfree(mem);
+        uvmdealloc(pagetable, a, oldsz);
+        return 0;
+      }
+    #endif
   }
   return newsz;
 }
@@ -297,24 +512,29 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 int
 uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 {
-  pte_t *pte;
+  pte_t *oldpte, *newpte;
   uint64 pa, i;
   uint flags;
   char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
-    pa = PTE2PA(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
-      goto err;
+    if((oldpte = walk(old, i, 0)) != 0){
+      flags = PTE_FLAGS(*oldpte);
+      if(*oldpte & PTE_V){
+        pa = PTE2PA(*oldpte);
+        if((mem = kalloc()) == 0)
+          goto err;
+        memmove(mem, (char*)pa, PGSIZE);
+        if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+          kfree(mem);
+          goto err;
+        }
+      }
+      else if(*oldpte & PTE_PG){
+        if((newpte = walk(new, i, 1)) == 0)
+          panic("uvmcopy-walk");
+        *newpte |= flags;
+      }
     }
   }
   return 0;
@@ -429,3 +649,97 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+// Allocate a new physical page, copy its data from the file, 
+// and map it back to the page table.
+void
+swapin(pte_t *pte, int index)
+{
+  uint offset, flags;
+  char *mem;
+  struct pagingmetadata *pmd;
+  struct proc *p = myproc();
+
+  pmd = &p->pagingmetadata[index];
+  if(pmd->location != FILE)
+    panic("swapin1");
+  offset = pmd->offset;
+  if((mem = kalloc()) == 0)
+    panic("swapin2");
+  if(readFromSwapFile(p, mem, offset, PGSIZE) == -1)
+    panic("swapin3");
+  flags = PTE_FLAGS(*pte);
+  *pte = PA2PTE(mem);
+  if(p->numofpagesinmemory >= MAX_PSYC_PAGES){
+    swapout(offset);
+    *pte |= flags;
+    *pte &= ~PTE_PG;
+  }
+  *pte |= PTE_V;
+  pmd->offset = NOTINFILE;
+  pmd->aging = initaging();
+  pmd->scfifolocal = inserttoqueue();
+  pmd->location = RAM;
+  p->numofpagesinmemory++;
+  sfence_vma();
+}
+
+void
+pagefault(uint64 addr)
+{
+  uint64 roundedaddr;
+  pte_t *pte;
+  struct proc *p = myproc();
+  
+  roundedaddr = PGROUNDDOWN(addr);
+  if((pte = walk(p->pagetable, roundedaddr, 0)) != 0 && (*pte & PTE_PG)){
+    #if ! defined (NONE)
+      swapin(pte, roundedaddr/PGSIZE);
+    #endif
+  } 
+  else if(addr <= p->sz)
+      uvmalloc(p->pagetable,roundedaddr, roundedaddr + PGSIZE);
+  else
+    exit(-1);
+}
+
+void
+updateagings(void)
+{
+  int index;
+  pte_t *pte;
+  struct pagingmetadata *pmd;
+  struct proc *p = myproc();
+
+  for(pmd = p->pagingmetadata; pmd < &p->pagingmetadata[MAX_TOTAL_PAGES]; pmd++){
+    if(pmd->location == RAM){
+      index = (int) (pmd - p->pagingmetadata);
+      pte = walk(p->pagetable, index*PGSIZE, 0);
+      if(*pte & PTE_A){
+        pmd->aging >>= 1;
+        pmd->aging |= (1L << 31);
+        *pte &= ~PTE_A;
+      } else
+          pmd->aging >>= 1;
+    }
+  }
+}
+
+int
+copyswapfile(struct proc* p, struct proc* np)
+{
+  char *mem;
+  struct pagingmetadata *pmd;
+
+  for(pmd = p->pagingmetadata; pmd < &p->pagingmetadata[MAX_TOTAL_PAGES]; pmd++){
+    if(pmd->location == FILE){
+      mem = kalloc();
+      if(readFromSwapFile(p, mem, pmd->offset, PGSIZE) == -1)
+        return -1;
+      if(writeToSwapFile(np, mem, pmd->offset, PGSIZE) == -1)
+        return -1;
+      kfree(mem);
+    }
+  }
+  return 0;
+}
diff --git a/user/sanitytest.c b/user/sanitytest.c
new file mode 100644
index 0000000..b755936
--- /dev/null
+++ b/user/sanitytest.c
@@ -0,0 +1,43 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+void sanitytest()
+{
+    int i, pid, xsatatus;
+    char *mems[18];
+    char parentmsg[18] = {'p','a','r','e','n','t',' ','w','r','o','t','e',' ','i','t','!','!','\n'};
+    char childmsg[18] = {'c','h','i','l','d',' ','w','r','o','t','e',' ','i','t','!','!','!','\n'}; 
+    printf("PARENT IS WRITING MESSAGE:\n");
+    for(i = 0 ; i < 18 ; i++){
+      mems[i] = sbrk(4096);
+      *mems[i] = parentmsg[i];
+      printf("%c", *mems[i]);
+    }
+    if((pid = fork()) ==0){
+      printf("CHILS IS READING MESSAGE:\n");
+      for (i = 0 ; i < 18 ; i++)
+        printf("%c", *mems[i]);
+      printf("CHILD IS WRITING MESSAGE:\n");
+      for(i = 0 ; i < 18 ; i++){
+        *mems[i] = childmsg[i];
+        printf("%c", *mems[i]);
+      }
+      exit(0);
+    }
+    else{
+      wait(&xsatatus); 
+    }
+}
+
+int main(void)
+{
+    sanitytest();
+    exit(0);
+}
\ No newline at end of file
