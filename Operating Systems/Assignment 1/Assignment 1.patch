diff --git a/Makefile b/Makefile
index 328f9c6..e1e82d7 100644
--- a/Makefile
+++ b/Makefile
@@ -48,6 +48,10 @@ TOOLPREFIX := $(shell if riscv64-unknown-elf-objdump -i 2>&1 | grep 'elf64-big'
 	echo "***" 1>&2; exit 1; fi)
 endif
 
+ifndef SCHEDFLAG
+SCHEDFLAG := DEFAULT
+endif
+
 QEMU = qemu-system-riscv64
 
 CC = $(TOOLPREFIX)gcc
@@ -62,6 +66,7 @@ CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
 CFLAGS += -I.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -D $(SCHEDFLAG)
 
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
@@ -132,9 +137,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
 
-fs.img: mkfs/mkfs README $(UPROGS)
-	mkfs/mkfs fs.img README $(UPROGS)
+fs.img: mkfs/mkfs README path $(UPROGS)
+	mkfs/mkfs fs.img README path $(UPROGS)
 
 -include kernel/*.d user/*.d
 
diff --git a/kernel/defs.h b/kernel/defs.h
index 41098f4..1f081da 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -105,6 +105,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             trace(int mask, int pid);
+void            updateticks(void);
+int             wait_stat(uint64, uint64);
+int             set_priority(int priority);
+void            runscheduler(int criterion) __attribute__((noreturn));
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/param.h b/kernel/param.h
index b5fdcb2..0f3813b 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,13 +1,24 @@
-#define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define NPROC                 64  // maximum number of processes
+#define NCPU                  8  // maximum number of CPUs
+#define NOFILE                16  // open files per process
+#define NFILE                 100  // open files per system
+#define NINODE                50  // maximum number of active i-nodes
+#define NDEV                  10  // maximum major device number
+#define ROOTDEV               1  // device number of file system root disk
+#define MAXARG                32  // max exec arguments
+#define MAXOPBLOCKS           10  // max # of blocks any FS op writes
+#define LOGSIZE               (MAXOPBLOCKS*3)  // max data blocks in on-disk log
+#define NBUF                  (MAXOPBLOCKS*3)  // size of disk block cache
+#define FSSIZE                1000  // size of file system in blocks
+#define MAXPATH               128   // maximum file path name
+#define QUANTUM               5   // initialized value of bursttime
+#define ALPHA                 50   // bursttime calculation's parameter
+#define NUMPERFFIELDS         6   // number of performance fields
+#define TESTHIGHPRIORITY      1
+#define HIGHPRIORITY          2
+#define NORMALPRIORITY        3
+#define LOWPRIORITY           4
+#define TESTLOWPRIORITY       5
+#define BURST                 1
+#define RURATIO               2
+#define READY                 3
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..8ddeda9 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -26,6 +26,14 @@ extern char trampoline[]; // trampoline.S
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+static int deacyfactors[5] = {
+[TESTHIGHPRIORITY]          1,
+[HIGHPRIORITY]              3,
+[NORMALPRIORITY]            5, 
+[LOWPRIORITY]               7,
+[TESTHIGHPRIORITY]          25,
+};
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -164,6 +172,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->ttime = ticks;
 }
 
 // Create a user page table for a given process,
@@ -243,6 +252,10 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
+  p->ready = p->ctime = ticks;
+  p->stime = p->retime = p->rutime = p->timerinterupts = p->mask = 0;
+  p->average_bursttime = QUANTUM * 100;
+  p->priority = NORMALPRIORITY;
 
   release(&p->lock);
 }
@@ -281,6 +294,11 @@ fork(void)
     return -1;
   }
 
+  np->ctime = ticks;
+  np->stime = np->retime = np->rutime = np->timerinterupts = 0;
+  np->average_bursttime = QUANTUM * 100;
+  np->mask = p->mask;
+
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -313,6 +331,8 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  np->ready = ticks;
+  np->priority = NORMALPRIORITY;
   release(&np->lock);
 
   return pid;
@@ -427,43 +447,110 @@ wait(uint64 addr)
   }
 }
 
-// Per-CPU process scheduler.
-// Each CPU calls scheduler() after setting itself up.
-// Scheduler never returns.  It loops, doing:
-//  - choose a process to run.
-//  - swtch to start running that process.
-//  - eventually that process transfers control
-//    via swtch back to the scheduler.
+int
+evalruratio(struct proc *p)
+{
+  if(p->rutime + p->stime != 0)
+    return (p->rutime * deacyfactors[p->priority]) / (p->rutime + p->stime);
+  else
+    return 0;
+}
+
 void
-scheduler(void)
+runprocess(struct proc *p, struct cpu *c)
 {
-  struct proc *p;
+  int ticks0;  // process start running time
+
+  // Switch to chosen process.  It is the process's job
+  // to release its lock and then reacquire it
+  // before jumping back to us.
+  p->state = RUNNING;
+  c->proc = p;
+  ticks0 = ticks;
+  swtch(&c->context, &p->context);
+  p->average_bursttime = ALPHA * (ticks-ticks0) + ((100-ALPHA) * p->average_bursttime)/100;
+  // Process is done running for now.
+  // It should have changed its p->state before coming back.
+  c->proc = 0;
+}
+
+void
+runscheduler(int criterion)
+{
+  struct proc *p, *minp;
   struct cpu *c = mycpu();
-  
+
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
+    minp = 0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+      if(p->state == RUNNABLE){
+        if(!minp)
+          minp = p;
+        else if(criterion == BURST && p->average_bursttime < minp->average_bursttime){
+          release(&minp->lock);
+          minp = p;
+        }
+        else if(criterion == RURATIO && evalruratio(p) < evalruratio(minp)){
+          release(&minp->lock);
+          minp = p;
+        }
+        else if(criterion == READY && p->ready < minp->ready){
+          release(&minp->lock);
+          minp = p;
+        }
+        else
+          release(&p->lock);
       }
-      release(&p->lock);
+      else
+        release(&p->lock);
+    }
+    if(minp){
+      runprocess(minp, c);
+      release(&minp->lock);
     }
   }
 }
 
+// Per-CPU process scheduler.
+// Each CPU calls scheduler() after setting itself up.
+// Scheduler never returns.  It loops, doing:
+//  - choose a process to run.
+//  - swtch to start running that process.
+//  - eventually that process transfers control
+//    via swtch back to the scheduler.
+void
+scheduler(void)
+{
+  #if defined (DEFAULT)
+    struct proc *p;
+    struct cpu *c = mycpu();
+
+    c->proc = 0;
+    for(;;){
+      // Avoid deadlock by ensuring that devices can interrupt.
+      intr_on();
+
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if(p->state == RUNNABLE)
+          runprocess(p, c);
+        release(&p->lock);
+      }
+    }
+  #elif defined (FCFS)
+    runscheduler(READY);
+  #elif defined (SRT)
+    runscheduler(BURST);
+  #elif defined (CFSD)
+    runscheduler(RURATIO);
+  #endif
+}
+
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -498,6 +585,7 @@ yield(void)
   struct proc *p = myproc();
   acquire(&p->lock);
   p->state = RUNNABLE;
+  p->ready = ticks; //just for logics, never used!
   sched();
   release(&p->lock);
 }
@@ -566,6 +654,7 @@ wakeup(void *chan)
       acquire(&p->lock);
       if(p->state == SLEEPING && p->chan == chan) {
         p->state = RUNNABLE;
+        p->ready = ticks;
       }
       release(&p->lock);
     }
@@ -587,6 +676,7 @@ kill(int pid)
       if(p->state == SLEEPING){
         // Wake process from sleep().
         p->state = RUNNABLE;
+        p->ready = ticks;
       }
       release(&p->lock);
       return 0;
@@ -654,3 +744,108 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+trace(int mask, int pid)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->pid == pid){
+      p->mask = mask;
+      release(&p->lock);
+      return 0;
+    }
+    release(&p->lock);
+  }
+  return -1;
+}
+
+void
+updateticks(void)
+{
+  struct proc *p;
+  
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == SLEEPING){
+      p->stime++;
+    }
+    else if(p->state == RUNNABLE){
+      p->retime++;
+    }
+    else if(p->state == RUNNING){
+      p->rutime++;
+    }
+    release(&p->lock);
+  }
+}
+
+// Wait for a child process to exit and return its pid.
+// Return -1 if this process has no children.
+int
+wait_stat(uint64 stataddr, uint64 perfaddr)
+{
+  struct proc *np;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(np = proc; np < &proc[NPROC]; np++){
+      if(np->parent == p){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&np->lock);
+
+        havekids = 1;
+        if(np->state == ZOMBIE){
+          // Found one.
+          pid = np->pid;
+          if(stataddr != 0 && copyout(p->pagetable, stataddr, (char *)&np->xstate,
+                                  sizeof(np->xstate)) < 0) {
+            release(&np->lock);
+            release(&wait_lock);
+            return -1;
+          }
+          freeproc(np);
+          if(perfaddr != 0 && copyout(p->pagetable, perfaddr, (char *)&np->ctime,
+                                  sizeof(np->ctime)*NUMPERFFIELDS) < 0) {
+            release(&np->lock);
+            release(&wait_lock);
+            return -1;
+          }
+          release(&np->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&np->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || p->killed){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+int
+set_priority(int priority)
+{
+  struct proc *p = myproc();
+
+  if(priority < TESTHIGHPRIORITY || priority > TESTLOWPRIORITY)
+    return -1;
+  acquire(&p->lock);
+  p->priority = priority;
+  release(&p->lock);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index 8e90008..8c2cf4b 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -105,4 +105,15 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
-};
+
+  int ctime;                   // process creation time
+  int ttime;                   // process termination time;
+  int stime;                   // the total time the process spent in the SLEEPING state
+  int retime;                  // the total time the process spent in the RUNNABLE state
+  int rutime;                  // the total time the process spent in the RUNNING state
+  int average_bursttime;       // approximate estimated burst time
+  int timerinterupts;          // counting timer interupts while running
+  int priority;                // process priority
+  int mask;                    // tracing mask
+  int ready;                   // the time the process became RUNNABLE, used only by non-preemptive sched algorithms
+};  
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..c97b822 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,40 +104,88 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_wait_stat(void);
+extern uint64 sys_set_priority(void);
 
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]           sys_fork,
+[SYS_exit]           sys_exit,
+[SYS_wait]           sys_wait,
+[SYS_pipe]           sys_pipe,
+[SYS_read]           sys_read,
+[SYS_kill]           sys_kill,
+[SYS_exec]           sys_exec,
+[SYS_fstat]          sys_fstat,
+[SYS_chdir]          sys_chdir,
+[SYS_dup]            sys_dup,
+[SYS_getpid]         sys_getpid,
+[SYS_sbrk]           sys_sbrk,
+[SYS_sleep]          sys_sleep,
+[SYS_uptime]         sys_uptime,
+[SYS_open]           sys_open,
+[SYS_write]          sys_write,
+[SYS_mknod]          sys_mknod,
+[SYS_unlink]         sys_unlink,
+[SYS_link]           sys_link,
+[SYS_mkdir]          sys_mkdir,
+[SYS_close]          sys_close,
+[SYS_trace]          sys_trace,
+[SYS_wait_stat]      sys_wait_stat,
+[SYS_set_priority]   sys_set_priority,
 };
 
+static char sysnames[NELEM(syscalls)][15] = {
+[SYS_fork]           "fork",
+[SYS_exit]           "exit",
+[SYS_wait]           "wait", 
+[SYS_pipe]           "pipe",
+[SYS_read]           "read",
+[SYS_kill]           "kill",
+[SYS_exec]           "exec",
+[SYS_fstat]          "fstat",
+[SYS_chdir]          "chdir",
+[SYS_dup]            "dup",
+[SYS_getpid]         "getpid",
+[SYS_sbrk]           "sbrk",
+[SYS_sleep]          "sleep",
+[SYS_uptime]         "uptime",
+[SYS_open]           "open",
+[SYS_write]          "write",
+[SYS_mknod]          "mknod",
+[SYS_unlink]         "unlink",
+[SYS_link]           "link",
+[SYS_mkdir]          "mkdir",
+[SYS_close]          "close",
+[SYS_trace]          "trace",
+[SYS_wait_stat]      "wait_stat",
+[SYS_set_priority]   "set_priority",
+};
+
+void
+printtrace(struct proc *p, int num, int arg)
+{
+  if(num == SYS_fork)
+    printf("%d: syscall %s NULL -> %d\n", p->pid, sysnames[num], p->trapframe->a0);
+  else if(num == SYS_kill || num == SYS_sbrk)
+    printf("%d: syscall %s %d -> %d\n", p->pid, sysnames[num], arg, p->trapframe->a0);
+  else
+    printf("%d: syscall %s -> %d\n", p->pid, sysnames[num], p->trapframe->a0);
+}
+
 void
 syscall(void)
 {
-  int num;
+  int arg, num;
   struct proc *p = myproc();
 
+  argint(0, &arg);
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     p->trapframe->a0 = syscalls[num]();
+    if(p->mask & (1 << num)){
+      printtrace(p, num, arg);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..993505b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,25 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork          1
+#define SYS_exit          2
+#define SYS_wait          3
+#define SYS_pipe          4
+#define SYS_read          5
+#define SYS_kill          6
+#define SYS_exec          7
+#define SYS_fstat         8
+#define SYS_chdir         9
+#define SYS_dup           10
+#define SYS_getpid        11
+#define SYS_sbrk          12
+#define SYS_sleep         13
+#define SYS_uptime        14
+#define SYS_open          15
+#define SYS_write         16
+#define SYS_mknod         17
+#define SYS_unlink        18
+#define SYS_link          19
+#define SYS_mkdir         20
+#define SYS_close         21
+#define SYS_trace         22
+#define SYS_wait_stat     23
+#define SYS_set_priority  24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..ab2df89 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -95,3 +95,31 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int mask, pid;
+  
+  if(argint(0, &mask) < 0 || argint(1, &pid) < 0)
+    return -1;
+  return trace(mask, pid);
+}
+
+uint64
+sys_wait_stat(void)
+{
+  uint64 status, perf;
+  if(argaddr(0, &status) < 0 || argaddr(1, &perf) < 0)
+    return -1;
+  return wait_stat(status, perf);
+}
+
+uint64
+sys_set_priority(void)
+{
+  int priority;
+  if(argint(0, &priority) < 0)
+    return -1;
+  return set_priority(priority);
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..6d81d26 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -77,9 +77,14 @@ usertrap(void)
     exit(-1);
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2)
-    yield();
-
+  #if ! defined (FCFS)
+    if(which_dev == 2){
+      p->timerinterupts++;
+      if(p->timerinterupts%QUANTUM == 0)
+        yield();
+    }
+  #endif
+    
   usertrapret();
 }
 
@@ -150,8 +155,10 @@ kerneltrap()
   }
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
-    yield();
+  #if ! defined (FCFS)
+    if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
+      yield();
+  #endif
 
   // the yield() may have caused some traps to occur,
   // so restore trap registers for use by kernelvec.S's sepc instruction.
@@ -164,6 +171,7 @@ clockintr()
 {
   acquire(&tickslock);
   ticks++;
+  updateticks();
   wakeup(&ticks);
   release(&tickslock);
 }
diff --git a/path b/path
new file mode 100644
index 0000000..58e7779
--- /dev/null
+++ b/path
@@ -0,0 +1 @@
+/:/user/:
diff --git a/user/init.c b/user/init.c
index e0a5689..34b629a 100644
--- a/user/init.c
+++ b/user/init.c
@@ -16,6 +16,10 @@ main(void)
 {
   int pid, wpid;
 
+  #ifdef SCHEDFLAG
+    printf("hello!\n");
+  #endif
+
   if(open("console", O_RDWR) < 0){
     mknod("console", CONSOLE, 0);
     open("console", O_RDWR);
diff --git a/user/sh.c b/user/sh.c
index 83dd513..e2106a7 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -12,6 +12,7 @@
 #define BACK  5
 
 #define MAXARGS 10
+#define MAXLENGTH 999
 
 struct cmd {
   int type;
@@ -53,6 +54,41 @@ int fork1(void);  // Fork but panics on failure.
 void panic(char*);
 struct cmd *parsecmd(char*);
 
+// Find the program and execute it.
+void
+findexec(struct execcmd *ecmd)
+{
+  int i, start, end, nbytes, fd;
+  char buf[MAXLENGTH], path[MAXLENGTH];
+
+  exec(ecmd->argv[0], ecmd->argv);
+  fd = open("/path", O_RDONLY);
+  if(fd < 0 || (nbytes = read(fd, buf, sizeof(buf))) < 0)
+    return;
+  close(fd);
+  start = 0;
+  end = 0;
+  while(end < nbytes)
+  {
+    if(buf[end] ==':')
+    {
+      for(i=0; ecmd->argv[0][i] != '\0'; i++)
+        {
+          path[end-start+i] = ecmd->argv[0][i];
+        }
+      path[end-start+i] = '\0';
+      exec(path, ecmd->argv);
+      end++;
+      start = end;
+    }
+    else
+    {
+      path[end-start] = buf[end];
+      end++;
+    }
+  }
+}
+
 // Execute cmd.  Never returns.
 void
 runcmd(struct cmd *cmd)
@@ -75,7 +111,7 @@ runcmd(struct cmd *cmd)
     ecmd = (struct execcmd*)cmd;
     if(ecmd->argv[0] == 0)
       exit(1);
-    exec(ecmd->argv[0], ecmd->argv);
+    findexec(ecmd);
     fprintf(2, "exec %s failed\n", ecmd->argv[0]);
     break;
 
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..f7dca6d
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,15 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char **argv)
+{
+  if(argc < 3){
+    fprintf(2, "usage: trace mask pid...\n");
+    exit(1);
+  }
+  if(trace(atoi(argv[1]), atoi(argv[2])) < 0)
+    fprintf(2, "trace: failed to trace\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index b71ecda..cd2c0bf 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,13 @@
 struct stat;
 struct rtcdate;
+struct perf {
+    int ctime;
+    int ttime;
+    int stime;
+    int retime;
+    int rutime;
+    int average_bursttime;
+};
 
 // system calls
 int fork(void);
@@ -23,6 +31,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int mask, int pid);
+int wait_stat(int* status, struct perf* performance);
+int set_priority(int priority);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,4 +50,4 @@ void* malloc(uint);
 void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
-void *memcpy(void *, const void *, uint);
+void *memcpy(void *, const void *, uint);
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..ebaad45 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("wait_stat");
+entry("set_priority");
\ No newline at end of file
