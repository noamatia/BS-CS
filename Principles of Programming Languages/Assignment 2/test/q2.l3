
(define last-element
   (lambda (lst)
     (if (eq? (cdr lst) '())
	(car lst)
	(last-element (cdr lst))
     )
   )
)

(define power
    (lambda (n1 n2)
       (if (= n2 0)
           1
           (* n1 (power n1 (- n2 1)))
       )
    )
)

(define sum-lst-power
    (lambda (lst n)
       (if(eq? lst '())
          0
          (+ (power (car lst) n) (sum-lst-power (cdr lst) n))
       )
    )
)

(define num-from-digits
  (lambda (lst)
     (if (eq? lst '())
         0
         (+ (* (power 10 (- (length-of-lst lst) 1)) (car lst)) (num-from-digits (cdr lst)))
     )
  )
)

(define is-narcissistic
  (lambda (lst)
       (if(= (num-from-digits lst) (sum-lst-power lst (length-of-lst lst)))
          #t
          #f
       )
  )
)

(define length-of-lst
  (lambda (lst)
    (if (eq? lst '())
        0
        (+ 1 (length-of-lst (cdr lst)))
    )
  )
)





 
  



